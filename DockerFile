# ------------------------------------------------------------------------------
# Build stage: compiles the Spring Boot app using Maven Wrapper
# ------------------------------------------------------------------------------
FROM eclipse-temurin:21-jdk AS build
WORKDIR /app

# Copy only Maven wrapper & pom first to leverage Docker layer caching
# (Dependencies are downloaded once unless pom/wrapper changes.)
COPY server/pom.xml server/mvnw server/.mvn/ ./server/
RUN chmod +x server/mvnw
RUN ./server/mvnw -q -f server/pom.xml -B -DskipTests dependency:go-offline

# Now copy the application sources and build the jar
COPY server/ ./server/
RUN ./server/mvnw -q -f server/pom.xml -B -DskipTests package

# ------------------------------------------------------------------------------
# Run stage: runs the fat jar on a slim JRE
# ------------------------------------------------------------------------------
FROM eclipse-temurin:21-jre
WORKDIR /app

# JVM memory tuning: respect container limits
ENV JAVA_OPTS="-XX:MaxRAMPercentage=75.0"

# Render injects PORT at runtime; expose for local clarity
ENV PORT=8080
EXPOSE 8080

# Copy the built jar from the build stage
COPY --from=build /app/server/target/*.jar /app/app.jar

# Start the application:
# - Pass server.port from the PORT env var (Render sets this)
# - Allow optional SPRING_PROFILES_ACTIVE for profile selection
CMD ["sh", "-c", "java $JAVA_OPTS -Dserver.port=${PORT} -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE:-} -jar /app/app.jar"]
